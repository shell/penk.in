<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Httpster: Vladimir Penkin]]></title>
  <link href="http://httpster.in/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://httpster.in/"/>
  <updated>2013-03-19T11:55:50-05:00</updated>
  <id>http://httpster.in/</id>
  <author>
    <name><![CDATA[Vladimir Penkin]]></name>
    <email><![CDATA[penkinv@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[myGengo Api Labs Contest]]></title>
    <link href="http://httpster.in/blog/2011/03/03/mygengo-contest/"/>
    <updated>2011-03-03T14:53:00-05:00</updated>
    <id>http://httpster.in/blog/2011/03/03/mygengo-contest</id>
    <content type="html"><![CDATA[<p>Starting from a new years holidays I have participated in <a href="http://mygengo.com/services/api/lab/">myGengo Api Labs</a></p>

<p>3 Things I have developed so far:</p>

<p><strong>Mugen</strong> - ruby wrapper for myGengo API, based on <code>httparty</code>. Also include generators of nested rails app that provides basic interface. I have took a look on existing wrapper provided by myGengo Team, which was not very clear and rubyish way. Also it's been a while since I wanted to try <code>httparty</code> gem by John Nunemaker. <a href="https://github.com/shell/mugen">GitHub</a>
<a href="http://mygengo.com/services/api/plugins/details/ruby-on-rails/">Mygengo Plugin page</a></p>

<!-- more -->


<p>  Install it now with :
<code>bash
$ gem install mugen
$ rails generate mugen
</code></p>

<br />


<p><img src="http://httpster.in/images/screen-mugen.png" alt="mugen" class="post-img" /></p>

<p><strong>Radiant-cms extension</strong> - Is also using <code>mugen</code> to talk to myGengo servers. This extension integrates to your administration interface to set up jobs for translation. Translations can easily be stored in your database and inserted in your content. <a href="http://ext.radiantcms.org/extensions/260-mygengo">Extension page</a>, <a href="https://github.com/shell/radiant-mygengo-extension">GitHub</a>
<a href="http://mygengo.com/services/api/plugins/details/radiant/">Mygengo Plugin page</a></p>

<p>  Radiant installation:
<code>bash
$ script/extension install mygengo
</code></p>

<br />


<p><img src="http://httpster.in/images/screen-radiant-extension.png" alt="mugen" class="post-img"/></p>

<p><strong>Zend Framework plugin</strong> - it took 2 days of hardcore digging in ZF documentation and coding all that classes in PHP. But I nailed it. Installation instructions for existing zf apps as well as quickstart guide available in <a href="https://github.com/shell/zf-mygengo/blob/master/README.md">readme</a>. <a href="https://github.com/shell/zf-mygengo">GitHub</a>
<a href="http://mygengo.com/services/api/plugins/details/zend-framework/">Mygengo Plugin page</a></p>

<p>Check out <a href="http://mygengo.com/services/api/lab/winners/">Winners page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pre and post hooks for external libraries]]></title>
    <link href="http://httpster.in/blog/2011/02/02/pre-and-post-hooks-with-method_alias/"/>
    <updated>2011-02-02T14:53:00-05:00</updated>
    <id>http://httpster.in/blog/2011/02/02/pre-and-post-hooks-with-method_alias</id>
    <content type="html"><![CDATA[<p>Ever missing hooks in your favorite libraries? <code>before_filter</code> and <code>after_fileter</code> is not working outside rails?
Thanks to ruby awesomness it's never been an issue for programmers who know how to use <code>alias</code> or <code>alias_method</code>.</p>

<h2>Problem</h2>

<p>Here I am, sitting in front of laptop, writing yet another API wrapper. As I get tired of ruby native <a href="http://www.ruby-doc.org/stdlib/libdoc/net/http/rdoc/classes/Net/HTTP.html">NET::HTTP</a> requests and wanted to try something more explicit and gave a shot to <a href="http://github.com/jnunemaker/httparty">HTTParty</a> by John Nunemaker. Syntax is very simple and I came with following code:</p>

<p>``` ruby
class Account &lt; Client
  def stats(options={})</p>

<pre><code>self.get "/account/stats", :query =&gt; options
</code></pre>

<p>  end</p>

<p>  def balance(options={})</p>

<pre><code>self.get "/account/balance", :query =&gt; options
</code></pre>

<p>  end
  ...
```</p>

<p>But apparently interaction is not so easy as it seems. All authenticated calls must be signed. The process of signing include arguments that was passed to current method. So in every method that called, it needs sign data before sending:</p>

<p>``` ruby
class Account
  def stats(options={})</p>

<pre><code>self.get "/account/stats", :query =&gt; Mugen.set_params(options)
</code></pre>

<p>  end
  ...
  def balance(options={})</p>

<pre><code>self.get "/account/balance", :query =&gt; Mugen.set_params(options)
</code></pre>

<p>  end
  ...
```</p>

<p>Seems like unnecessary code duplication. Isn't this kind of thing that pre-hook is made for?
To solve this problem you diffinetly <a href="http://railstips.org/blog/archives/2010/10/14/stop-googling/">shouldn't google</a> for that.</p>

<p>After digging httparty source code I haven't found some pre- or post- hooks. Seems like we need to do it ourselves.</p>

<!-- more -->


<h2>Cooking hooks with alias_methiod</h2>

<p>Thanks to greatness of ruby, I can open and modify native or external classes:</p>

<p>``` ruby</p>

<h1>lib/mugen/httparty_extensions.rb</h1>

<p>module HTTParty
  module ClassMethods</p>

<pre><code>alias :original_get :get

# Inject pre GET hook
def get(path, options={})
  path, options = before_get(path, options) if respond_to?(:before_get)
  original_get(path, options)
end
</code></pre>

<p>  end
end
```</p>

<p>Ok now we have self-cooked <code>before_get</code> method that will be called before original HTTParty.get and will do the work:</p>

<p>``` ruby
class Client
  include HTTParty
  ...
  def self.before_get(path, options)</p>

<pre><code>options[:query] = Mugen.set_params(options[:query]) if options.has_key? :query
[path, options]
</code></pre>

<p>  end
  ...
```</p>

<p>Remember to put <code>original_get</code> arguments back with last line</p>

<h2>Things to watch out</h2>

<p>Be aware <code>alias</code> is keyword so there is no comma after name of new method. But <code>alias_method</code> is method version of alias.</p>

<p>Also do not crush others code. If I put <code>Mugen.set_params</code> in <strong><code>httparty_extensions.rb</code></strong> this can easily break other code that rely on HTTParty.</p>

<!-- Discovering new tricks in ruby is always fun. -->

]]></content>
  </entry>
  
</feed>
